// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: janction/videoRendering/v1/types.proto

package videoRendering

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Worker_WorkerStatus int32

const (
	Worker_WORKER_STATUS_UNDEFINED           Worker_WorkerStatus = 0
	Worker_WORKER_STATUS_RENDERING           Worker_WorkerStatus = 1
	Worker_WORKER_STATUS_PROPOSED_SOLUTION   Worker_WorkerStatus = 2
	Worker_WORKER_STATUS_VALIDATING_SOLUTION Worker_WorkerStatus = 3
	Worker_WORKER_STATUS_DONE                Worker_WorkerStatus = 4
)

var Worker_WorkerStatus_name = map[int32]string{
	0: "WORKER_STATUS_UNDEFINED",
	1: "WORKER_STATUS_RENDERING",
	2: "WORKER_STATUS_PROPOSED_SOLUTION",
	3: "WORKER_STATUS_VALIDATING_SOLUTION",
	4: "WORKER_STATUS_DONE",
}

var Worker_WorkerStatus_value = map[string]int32{
	"WORKER_STATUS_UNDEFINED":           0,
	"WORKER_STATUS_RENDERING":           1,
	"WORKER_STATUS_PROPOSED_SOLUTION":   2,
	"WORKER_STATUS_VALIDATING_SOLUTION": 3,
	"WORKER_STATUS_DONE":                4,
}

func (x Worker_WorkerStatus) String() string {
	return proto.EnumName(Worker_WorkerStatus_name, int32(x))
}

func (Worker_WorkerStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_48dc248d3c391ada, []int{2, 0}
}

type VideoRenderingThread_Validation_ValidationStatus int32

const (
	VideoRenderingThread_Validation_VALIDATION_STATUS_UNDEFINED   VideoRenderingThread_Validation_ValidationStatus = 0
	VideoRenderingThread_Validation_VALIDATION_STATUS_IN_PROGRESS VideoRenderingThread_Validation_ValidationStatus = 1
	VideoRenderingThread_Validation_VALIDATION_STATUS_PASSED      VideoRenderingThread_Validation_ValidationStatus = 2
	VideoRenderingThread_Validation_VALIDATION_STATUS_NOT_PASSED  VideoRenderingThread_Validation_ValidationStatus = 3
)

var VideoRenderingThread_Validation_ValidationStatus_name = map[int32]string{
	0: "VALIDATION_STATUS_UNDEFINED",
	1: "VALIDATION_STATUS_IN_PROGRESS",
	2: "VALIDATION_STATUS_PASSED",
	3: "VALIDATION_STATUS_NOT_PASSED",
}

var VideoRenderingThread_Validation_ValidationStatus_value = map[string]int32{
	"VALIDATION_STATUS_UNDEFINED":   0,
	"VALIDATION_STATUS_IN_PROGRESS": 1,
	"VALIDATION_STATUS_PASSED":      2,
	"VALIDATION_STATUS_NOT_PASSED":  3,
}

func (x VideoRenderingThread_Validation_ValidationStatus) String() string {
	return proto.EnumName(VideoRenderingThread_Validation_ValidationStatus_name, int32(x))
}

func (VideoRenderingThread_Validation_ValidationStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_48dc248d3c391ada, []int{4, 1, 0}
}

// Params defines the parameters of the module.
type Params struct {
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_48dc248d3c391ada, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

// GenesisState is the state that must be provided at genesis.
type GenesisState struct {
	// params defines all the parameters of the module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	// Video Rendering Task index
	VideoRenderingTaskInfo *VideoRenderingTaskInfo `protobuf:"bytes,3,opt,name=videoRenderingTaskInfo,proto3" json:"videoRenderingTaskInfo,omitempty"`
	// List of Video Rendering tasks
	VideoRenderingTaskList []IndexedVideoRenderingTask `protobuf:"bytes,5,rep,name=videoRenderingTaskList,proto3" json:"videoRenderingTaskList"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_48dc248d3c391ada, []int{1}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetVideoRenderingTaskInfo() *VideoRenderingTaskInfo {
	if m != nil {
		return m.VideoRenderingTaskInfo
	}
	return nil
}

func (m *GenesisState) GetVideoRenderingTaskList() []IndexedVideoRenderingTask {
	if m != nil {
		return m.VideoRenderingTaskList
	}
	return nil
}

type Worker struct {
	Address    string              `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Status     Worker_WorkerStatus `protobuf:"varint,2,opt,name=status,proto3,enum=janction.videoRendering.v1.Worker_WorkerStatus" json:"status,omitempty"`
	Reputation *Worker_Reputation  `protobuf:"bytes,3,opt,name=reputation,proto3" json:"reputation,omitempty"`
}

func (m *Worker) Reset()         { *m = Worker{} }
func (m *Worker) String() string { return proto.CompactTextString(m) }
func (*Worker) ProtoMessage()    {}
func (*Worker) Descriptor() ([]byte, []int) {
	return fileDescriptor_48dc248d3c391ada, []int{2}
}
func (m *Worker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Worker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Worker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Worker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Worker.Merge(m, src)
}
func (m *Worker) XXX_Size() int {
	return m.Size()
}
func (m *Worker) XXX_DiscardUnknown() {
	xxx_messageInfo_Worker.DiscardUnknown(m)
}

var xxx_messageInfo_Worker proto.InternalMessageInfo

func (m *Worker) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Worker) GetStatus() Worker_WorkerStatus {
	if m != nil {
		return m.Status
	}
	return Worker_WORKER_STATUS_UNDEFINED
}

func (m *Worker) GetReputation() *Worker_Reputation {
	if m != nil {
		return m.Reputation
	}
	return nil
}

type Worker_Reputation struct {
	Stacked     uint64 `protobuf:"varint,1,opt,name=stacked,proto3" json:"stacked,omitempty"`
	Points      int64  `protobuf:"varint,2,opt,name=points,proto3" json:"points,omitempty"`
	Validations uint32 `protobuf:"varint,3,opt,name=validations,proto3" json:"validations,omitempty"`
	Solutions   uint32 `protobuf:"varint,4,opt,name=solutions,proto3" json:"solutions,omitempty"`
}

func (m *Worker_Reputation) Reset()         { *m = Worker_Reputation{} }
func (m *Worker_Reputation) String() string { return proto.CompactTextString(m) }
func (*Worker_Reputation) ProtoMessage()    {}
func (*Worker_Reputation) Descriptor() ([]byte, []int) {
	return fileDescriptor_48dc248d3c391ada, []int{2, 0}
}
func (m *Worker_Reputation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Worker_Reputation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Worker_Reputation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Worker_Reputation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Worker_Reputation.Merge(m, src)
}
func (m *Worker_Reputation) XXX_Size() int {
	return m.Size()
}
func (m *Worker_Reputation) XXX_DiscardUnknown() {
	xxx_messageInfo_Worker_Reputation.DiscardUnknown(m)
}

var xxx_messageInfo_Worker_Reputation proto.InternalMessageInfo

func (m *Worker_Reputation) GetStacked() uint64 {
	if m != nil {
		return m.Stacked
	}
	return 0
}

func (m *Worker_Reputation) GetPoints() int64 {
	if m != nil {
		return m.Points
	}
	return 0
}

func (m *Worker_Reputation) GetValidations() uint32 {
	if m != nil {
		return m.Validations
	}
	return 0
}

func (m *Worker_Reputation) GetSolutions() uint32 {
	if m != nil {
		return m.Solutions
	}
	return 0
}

// Video Rendering Task
// @cid the IPFS CID submitted by a task requester
type VideoRenderingTask struct {
	TaskId       string                  `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	Requester    string                  `protobuf:"bytes,2,opt,name=requester,proto3" json:"requester,omitempty"`
	Cid          string                  `protobuf:"bytes,3,opt,name=cid,proto3" json:"cid,omitempty"`
	StartFrame   uint32                  `protobuf:"varint,4,opt,name=start_frame,json=startFrame,proto3" json:"start_frame,omitempty"`
	EndFrame     uint32                  `protobuf:"varint,5,opt,name=end_frame,json=endFrame,proto3" json:"end_frame,omitempty"`
	ThreadAmount uint32                  `protobuf:"varint,6,opt,name=threadAmount,proto3" json:"threadAmount,omitempty"`
	InProgress   bool                    `protobuf:"varint,7,opt,name=in_progress,json=inProgress,proto3" json:"in_progress,omitempty"`
	Threads      []*VideoRenderingThread `protobuf:"bytes,8,rep,name=threads,proto3" json:"threads,omitempty"`
}

func (m *VideoRenderingTask) Reset()         { *m = VideoRenderingTask{} }
func (m *VideoRenderingTask) String() string { return proto.CompactTextString(m) }
func (*VideoRenderingTask) ProtoMessage()    {}
func (*VideoRenderingTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_48dc248d3c391ada, []int{3}
}
func (m *VideoRenderingTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VideoRenderingTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VideoRenderingTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VideoRenderingTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VideoRenderingTask.Merge(m, src)
}
func (m *VideoRenderingTask) XXX_Size() int {
	return m.Size()
}
func (m *VideoRenderingTask) XXX_DiscardUnknown() {
	xxx_messageInfo_VideoRenderingTask.DiscardUnknown(m)
}

var xxx_messageInfo_VideoRenderingTask proto.InternalMessageInfo

func (m *VideoRenderingTask) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *VideoRenderingTask) GetRequester() string {
	if m != nil {
		return m.Requester
	}
	return ""
}

func (m *VideoRenderingTask) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

func (m *VideoRenderingTask) GetStartFrame() uint32 {
	if m != nil {
		return m.StartFrame
	}
	return 0
}

func (m *VideoRenderingTask) GetEndFrame() uint32 {
	if m != nil {
		return m.EndFrame
	}
	return 0
}

func (m *VideoRenderingTask) GetThreadAmount() uint32 {
	if m != nil {
		return m.ThreadAmount
	}
	return 0
}

func (m *VideoRenderingTask) GetInProgress() bool {
	if m != nil {
		return m.InProgress
	}
	return false
}

func (m *VideoRenderingTask) GetThreads() []*VideoRenderingThread {
	if m != nil {
		return m.Threads
	}
	return nil
}

// A Video Rendering Thread is the smallest unit of work for a Task.
// Workers will try to complete a thread as soon as possible to submit first a solution
type VideoRenderingThread struct {
	ThreadId    string                             `protobuf:"bytes,1,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	StartFrame  uint32                             `protobuf:"varint,2,opt,name=start_frame,json=startFrame,proto3" json:"start_frame,omitempty"`
	EndFrame    uint32                             `protobuf:"varint,3,opt,name=end_frame,json=endFrame,proto3" json:"end_frame,omitempty"`
	InProgress  bool                               `protobuf:"varint,4,opt,name=in_progress,json=inProgress,proto3" json:"in_progress,omitempty"`
	Workers     []*Worker                          `protobuf:"bytes,5,rep,name=workers,proto3" json:"workers,omitempty"`
	Solution    *VideoRenderingThread_Solution     `protobuf:"bytes,6,opt,name=solution,proto3" json:"solution,omitempty"`
	Validations []*VideoRenderingThread_Validation `protobuf:"bytes,7,rep,name=validations,proto3" json:"validations,omitempty"`
}

func (m *VideoRenderingThread) Reset()         { *m = VideoRenderingThread{} }
func (m *VideoRenderingThread) String() string { return proto.CompactTextString(m) }
func (*VideoRenderingThread) ProtoMessage()    {}
func (*VideoRenderingThread) Descriptor() ([]byte, []int) {
	return fileDescriptor_48dc248d3c391ada, []int{4}
}
func (m *VideoRenderingThread) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VideoRenderingThread) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VideoRenderingThread.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VideoRenderingThread) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VideoRenderingThread.Merge(m, src)
}
func (m *VideoRenderingThread) XXX_Size() int {
	return m.Size()
}
func (m *VideoRenderingThread) XXX_DiscardUnknown() {
	xxx_messageInfo_VideoRenderingThread.DiscardUnknown(m)
}

var xxx_messageInfo_VideoRenderingThread proto.InternalMessageInfo

func (m *VideoRenderingThread) GetThreadId() string {
	if m != nil {
		return m.ThreadId
	}
	return ""
}

func (m *VideoRenderingThread) GetStartFrame() uint32 {
	if m != nil {
		return m.StartFrame
	}
	return 0
}

func (m *VideoRenderingThread) GetEndFrame() uint32 {
	if m != nil {
		return m.EndFrame
	}
	return 0
}

func (m *VideoRenderingThread) GetInProgress() bool {
	if m != nil {
		return m.InProgress
	}
	return false
}

func (m *VideoRenderingThread) GetWorkers() []*Worker {
	if m != nil {
		return m.Workers
	}
	return nil
}

func (m *VideoRenderingThread) GetSolution() *VideoRenderingThread_Solution {
	if m != nil {
		return m.Solution
	}
	return nil
}

func (m *VideoRenderingThread) GetValidations() []*VideoRenderingThread_Validation {
	if m != nil {
		return m.Validations
	}
	return nil
}

type VideoRenderingThread_Solution struct {
	ProposedBy string   `protobuf:"bytes,1,opt,name=proposed_by,json=proposedBy,proto3" json:"proposed_by,omitempty"`
	Files      []string `protobuf:"bytes,2,rep,name=files,proto3" json:"files,omitempty"`
}

func (m *VideoRenderingThread_Solution) Reset()         { *m = VideoRenderingThread_Solution{} }
func (m *VideoRenderingThread_Solution) String() string { return proto.CompactTextString(m) }
func (*VideoRenderingThread_Solution) ProtoMessage()    {}
func (*VideoRenderingThread_Solution) Descriptor() ([]byte, []int) {
	return fileDescriptor_48dc248d3c391ada, []int{4, 0}
}
func (m *VideoRenderingThread_Solution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VideoRenderingThread_Solution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VideoRenderingThread_Solution.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VideoRenderingThread_Solution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VideoRenderingThread_Solution.Merge(m, src)
}
func (m *VideoRenderingThread_Solution) XXX_Size() int {
	return m.Size()
}
func (m *VideoRenderingThread_Solution) XXX_DiscardUnknown() {
	xxx_messageInfo_VideoRenderingThread_Solution.DiscardUnknown(m)
}

var xxx_messageInfo_VideoRenderingThread_Solution proto.InternalMessageInfo

func (m *VideoRenderingThread_Solution) GetProposedBy() string {
	if m != nil {
		return m.ProposedBy
	}
	return ""
}

func (m *VideoRenderingThread_Solution) GetFiles() []string {
	if m != nil {
		return m.Files
	}
	return nil
}

type VideoRenderingThread_Validation struct {
	Validator  string                                           `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty"`
	StartFrame uint32                                           `protobuf:"varint,2,opt,name=start_frame,json=startFrame,proto3" json:"start_frame,omitempty"`
	EndFrame   uint32                                           `protobuf:"varint,3,opt,name=end_frame,json=endFrame,proto3" json:"end_frame,omitempty"`
	Status     VideoRenderingThread_Validation_ValidationStatus `protobuf:"varint,4,opt,name=status,proto3,enum=janction.videoRendering.v1.VideoRenderingThread_Validation_ValidationStatus" json:"status,omitempty"`
}

func (m *VideoRenderingThread_Validation) Reset()         { *m = VideoRenderingThread_Validation{} }
func (m *VideoRenderingThread_Validation) String() string { return proto.CompactTextString(m) }
func (*VideoRenderingThread_Validation) ProtoMessage()    {}
func (*VideoRenderingThread_Validation) Descriptor() ([]byte, []int) {
	return fileDescriptor_48dc248d3c391ada, []int{4, 1}
}
func (m *VideoRenderingThread_Validation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VideoRenderingThread_Validation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VideoRenderingThread_Validation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VideoRenderingThread_Validation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VideoRenderingThread_Validation.Merge(m, src)
}
func (m *VideoRenderingThread_Validation) XXX_Size() int {
	return m.Size()
}
func (m *VideoRenderingThread_Validation) XXX_DiscardUnknown() {
	xxx_messageInfo_VideoRenderingThread_Validation.DiscardUnknown(m)
}

var xxx_messageInfo_VideoRenderingThread_Validation proto.InternalMessageInfo

func (m *VideoRenderingThread_Validation) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func (m *VideoRenderingThread_Validation) GetStartFrame() uint32 {
	if m != nil {
		return m.StartFrame
	}
	return 0
}

func (m *VideoRenderingThread_Validation) GetEndFrame() uint32 {
	if m != nil {
		return m.EndFrame
	}
	return 0
}

func (m *VideoRenderingThread_Validation) GetStatus() VideoRenderingThread_Validation_ValidationStatus {
	if m != nil {
		return m.Status
	}
	return VideoRenderingThread_Validation_VALIDATION_STATUS_UNDEFINED
}

// Stores information about the Video Rendering  task
type VideoRenderingTaskInfo struct {
	NextId uint64 `protobuf:"varint,1,opt,name=nextId,proto3" json:"nextId,omitempty"`
}

func (m *VideoRenderingTaskInfo) Reset()         { *m = VideoRenderingTaskInfo{} }
func (m *VideoRenderingTaskInfo) String() string { return proto.CompactTextString(m) }
func (*VideoRenderingTaskInfo) ProtoMessage()    {}
func (*VideoRenderingTaskInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_48dc248d3c391ada, []int{5}
}
func (m *VideoRenderingTaskInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VideoRenderingTaskInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VideoRenderingTaskInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VideoRenderingTaskInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VideoRenderingTaskInfo.Merge(m, src)
}
func (m *VideoRenderingTaskInfo) XXX_Size() int {
	return m.Size()
}
func (m *VideoRenderingTaskInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VideoRenderingTaskInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VideoRenderingTaskInfo proto.InternalMessageInfo

func (m *VideoRenderingTaskInfo) GetNextId() uint64 {
	if m != nil {
		return m.NextId
	}
	return 0
}

// Stores the Video Rendering Task with the index
type IndexedVideoRenderingTask struct {
	Index              string             `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	VideoRenderingTask VideoRenderingTask `protobuf:"bytes,2,opt,name=videoRenderingTask,proto3" json:"videoRenderingTask"`
}

func (m *IndexedVideoRenderingTask) Reset()         { *m = IndexedVideoRenderingTask{} }
func (m *IndexedVideoRenderingTask) String() string { return proto.CompactTextString(m) }
func (*IndexedVideoRenderingTask) ProtoMessage()    {}
func (*IndexedVideoRenderingTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_48dc248d3c391ada, []int{6}
}
func (m *IndexedVideoRenderingTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexedVideoRenderingTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndexedVideoRenderingTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IndexedVideoRenderingTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexedVideoRenderingTask.Merge(m, src)
}
func (m *IndexedVideoRenderingTask) XXX_Size() int {
	return m.Size()
}
func (m *IndexedVideoRenderingTask) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexedVideoRenderingTask.DiscardUnknown(m)
}

var xxx_messageInfo_IndexedVideoRenderingTask proto.InternalMessageInfo

func (m *IndexedVideoRenderingTask) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *IndexedVideoRenderingTask) GetVideoRenderingTask() VideoRenderingTask {
	if m != nil {
		return m.VideoRenderingTask
	}
	return VideoRenderingTask{}
}

func init() {
	proto.RegisterEnum("janction.videoRendering.v1.Worker_WorkerStatus", Worker_WorkerStatus_name, Worker_WorkerStatus_value)
	proto.RegisterEnum("janction.videoRendering.v1.VideoRenderingThread_Validation_ValidationStatus", VideoRenderingThread_Validation_ValidationStatus_name, VideoRenderingThread_Validation_ValidationStatus_value)
	proto.RegisterType((*Params)(nil), "janction.videoRendering.v1.Params")
	proto.RegisterType((*GenesisState)(nil), "janction.videoRendering.v1.GenesisState")
	proto.RegisterType((*Worker)(nil), "janction.videoRendering.v1.Worker")
	proto.RegisterType((*Worker_Reputation)(nil), "janction.videoRendering.v1.Worker.Reputation")
	proto.RegisterType((*VideoRenderingTask)(nil), "janction.videoRendering.v1.VideoRenderingTask")
	proto.RegisterType((*VideoRenderingThread)(nil), "janction.videoRendering.v1.VideoRenderingThread")
	proto.RegisterType((*VideoRenderingThread_Solution)(nil), "janction.videoRendering.v1.VideoRenderingThread.Solution")
	proto.RegisterType((*VideoRenderingThread_Validation)(nil), "janction.videoRendering.v1.VideoRenderingThread.Validation")
	proto.RegisterType((*VideoRenderingTaskInfo)(nil), "janction.videoRendering.v1.VideoRenderingTaskInfo")
	proto.RegisterType((*IndexedVideoRenderingTask)(nil), "janction.videoRendering.v1.IndexedVideoRenderingTask")
}

func init() {
	proto.RegisterFile("janction/videoRendering/v1/types.proto", fileDescriptor_48dc248d3c391ada)
}

var fileDescriptor_48dc248d3c391ada = []byte{
	// 928 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0x4f, 0x6f, 0xe3, 0x44,
	0x14, 0xaf, 0xe3, 0x34, 0x7f, 0x5e, 0x0a, 0x8a, 0x46, 0x55, 0xf1, 0xa6, 0x25, 0xcd, 0x1a, 0x81,
	0x72, 0xd9, 0x64, 0x37, 0x08, 0xa4, 0x15, 0x7b, 0x20, 0x55, 0xbc, 0x91, 0xa1, 0x38, 0xd1, 0x38,
	0xed, 0x4a, 0x20, 0x14, 0xb9, 0xf1, 0x34, 0xeb, 0x6d, 0x63, 0x07, 0xcf, 0xa4, 0x6c, 0x2f, 0x48,
	0x88, 0x2f, 0xc0, 0x09, 0xbe, 0x04, 0x17, 0x24, 0xbe, 0x02, 0xd2, 0x1e, 0x57, 0x9c, 0x38, 0x21,
	0xd4, 0x1e, 0xf8, 0x1a, 0xc8, 0x33, 0xe3, 0xa6, 0xae, 0x93, 0x74, 0xab, 0x3d, 0xc5, 0xf3, 0x7e,
	0xbf, 0xf7, 0x7b, 0x33, 0xbf, 0x99, 0x79, 0x13, 0xf8, 0xe8, 0x85, 0xe3, 0x8f, 0x98, 0x17, 0xf8,
	0xcd, 0x33, 0xcf, 0x25, 0x01, 0x26, 0xbe, 0x4b, 0x42, 0xcf, 0x1f, 0x37, 0xcf, 0x1e, 0x35, 0xd9,
	0xf9, 0x94, 0xd0, 0xc6, 0x34, 0x0c, 0x58, 0x80, 0x2a, 0x31, 0xaf, 0x91, 0xe4, 0x35, 0xce, 0x1e,
	0x55, 0xee, 0x8d, 0x02, 0x3a, 0x09, 0xe8, 0x90, 0x33, 0x9b, 0x62, 0x20, 0xd2, 0x2a, 0x9b, 0xe3,
	0x60, 0x1c, 0x88, 0x78, 0xf4, 0x25, 0xa2, 0x7a, 0x01, 0x72, 0x7d, 0x27, 0x74, 0x26, 0x54, 0xff,
	0x3d, 0x03, 0x1b, 0x5d, 0xe2, 0x13, 0xea, 0x51, 0x9b, 0x39, 0x8c, 0xa0, 0xcf, 0x21, 0x37, 0xe5,
	0x90, 0xa6, 0xd4, 0x94, 0x7a, 0xa9, 0xa5, 0x37, 0x96, 0x17, 0x6e, 0x08, 0x91, 0xbd, 0xec, 0xab,
	0x7f, 0x76, 0xd7, 0xb0, 0xcc, 0x43, 0x2f, 0x60, 0x2b, 0xc9, 0x1c, 0x38, 0xf4, 0xc4, 0xf4, 0x8f,
	0x03, 0x4d, 0xe5, 0x8a, 0xad, 0x55, 0x8a, 0x87, 0x0b, 0x33, 0xf1, 0x12, 0x45, 0x44, 0x17, 0xd5,
	0xda, 0xf7, 0x28, 0xd3, 0xd6, 0x6b, 0x6a, 0xbd, 0xd4, 0xfa, 0x64, 0x55, 0x2d, 0xd3, 0x77, 0xc9,
	0x4b, 0xe2, 0xa6, 0x4b, 0xca, 0x05, 0x2d, 0x91, 0xd6, 0x7f, 0xca, 0x42, 0xee, 0x59, 0x10, 0x9e,
	0x90, 0x10, 0xb5, 0x20, 0xef, 0xb8, 0x6e, 0x48, 0xa8, 0xb0, 0xab, 0xb8, 0xa7, 0xfd, 0xf5, 0xc7,
	0x83, 0x4d, 0xb9, 0x03, 0x6d, 0x81, 0xd8, 0x2c, 0xca, 0xc6, 0x31, 0x11, 0x75, 0x21, 0x47, 0x99,
	0xc3, 0x66, 0x54, 0xcb, 0xd4, 0x94, 0xfa, 0xbb, 0xad, 0xe6, 0xaa, 0x39, 0x8a, 0x3a, 0xf2, 0xc7,
	0xe6, 0x69, 0x58, 0xa6, 0xa3, 0xaf, 0x00, 0x42, 0x32, 0x9d, 0x31, 0x27, 0xca, 0x95, 0xe6, 0x3e,
	0x78, 0x03, 0x31, 0x7c, 0x95, 0x84, 0xaf, 0x09, 0x54, 0x7e, 0x00, 0x98, 0x23, 0x48, 0x83, 0x3c,
	0x65, 0xce, 0xe8, 0x84, 0xb8, 0x7c, 0x65, 0x59, 0x1c, 0x0f, 0xd1, 0x16, 0xe4, 0xa6, 0x81, 0xe7,
	0x33, 0x31, 0x7f, 0x15, 0xcb, 0x11, 0xaa, 0x41, 0xe9, 0xcc, 0x39, 0xf5, 0x5c, 0x9e, 0x4f, 0xf9,
	0x7c, 0xde, 0xc1, 0xd7, 0x43, 0x68, 0x07, 0x8a, 0x34, 0x38, 0x9d, 0x09, 0x3c, 0xcb, 0xf1, 0x79,
	0x40, 0xff, 0x4d, 0x81, 0x8d, 0xeb, 0xeb, 0x44, 0xdb, 0xf0, 0xde, 0xb3, 0x1e, 0xfe, 0xd2, 0xc0,
	0x43, 0x7b, 0xd0, 0x1e, 0x1c, 0xd8, 0xc3, 0x03, 0xab, 0x63, 0x3c, 0x35, 0x2d, 0xa3, 0x53, 0x5e,
	0x4b, 0x83, 0xd8, 0xb0, 0x3a, 0x06, 0x36, 0xad, 0x6e, 0x59, 0x41, 0x1f, 0xc0, 0x6e, 0x12, 0xec,
	0xe3, 0x5e, 0xbf, 0x67, 0x1b, 0x9d, 0xa1, 0xdd, 0xdb, 0x3f, 0x18, 0x98, 0x3d, 0xab, 0x9c, 0x41,
	0x1f, 0xc2, 0xfd, 0x24, 0xe9, 0xb0, 0xbd, 0x6f, 0x76, 0xda, 0x03, 0xd3, 0xea, 0xce, 0x69, 0x2a,
	0xda, 0x02, 0x94, 0xa4, 0x75, 0x7a, 0x96, 0x51, 0xce, 0xea, 0x7f, 0x66, 0x00, 0xa5, 0x8f, 0x4e,
	0xe4, 0x0e, 0x8b, 0x4e, 0xa7, 0xb0, 0xad, 0x88, 0xe5, 0x08, 0x7d, 0x0a, 0xc5, 0x90, 0x7c, 0x37,
	0x23, 0x94, 0x91, 0x90, 0x1b, 0xb7, 0xea, 0xac, 0xcc, 0xa9, 0xa8, 0x0c, 0xea, 0xc8, 0x73, 0xb9,
	0x9b, 0x45, 0x1c, 0x7d, 0xa2, 0x5d, 0x28, 0x51, 0xe6, 0x84, 0x6c, 0x78, 0x1c, 0x3a, 0x13, 0x22,
	0x7d, 0x04, 0x1e, 0x7a, 0x1a, 0x45, 0xd0, 0x36, 0x14, 0x89, 0xef, 0x4a, 0x78, 0x9d, 0xc3, 0x05,
	0xe2, 0xbb, 0x02, 0xd4, 0x61, 0x83, 0x3d, 0x0f, 0x89, 0xe3, 0xb6, 0x27, 0xc1, 0xcc, 0x67, 0x5a,
	0x8e, 0xe3, 0x89, 0x58, 0x54, 0xc1, 0xf3, 0xa3, 0x6e, 0x32, 0xe6, 0x27, 0x3b, 0x5f, 0x53, 0xea,
	0x05, 0x0c, 0x9e, 0xdf, 0x97, 0x11, 0xf4, 0x05, 0xe4, 0x45, 0x02, 0xd5, 0x0a, 0xfc, 0x9e, 0x3d,
	0xbc, 0xc3, 0x9d, 0xe6, 0x89, 0x38, 0x16, 0xd0, 0xff, 0xcb, 0xc1, 0xe6, 0x22, 0x46, 0xb4, 0x0c,
	0xc1, 0x19, 0x7a, 0xb1, 0x99, 0x05, 0x11, 0x30, 0x53, 0x26, 0x64, 0x56, 0x9b, 0xa0, 0xde, 0x30,
	0xe1, 0xc6, 0x02, 0xb3, 0xa9, 0x05, 0x3e, 0x81, 0xfc, 0xf7, 0xfc, 0x28, 0x52, 0xd9, 0x48, 0xf4,
	0xdb, 0xef, 0x15, 0x8e, 0x53, 0xd0, 0x01, 0x14, 0xe2, 0x63, 0xcd, 0xfd, 0x2d, 0xb5, 0x1e, 0xdf,
	0xd5, 0x9f, 0x86, 0x2d, 0x05, 0xf0, 0x95, 0x14, 0xfa, 0x36, 0x79, 0xc1, 0xf2, 0x7c, 0x62, 0x9f,
	0xdd, 0x59, 0xf9, 0xf0, 0x4a, 0x23, 0x71, 0x3b, 0x2b, 0xdf, 0x40, 0x21, 0x2e, 0x8a, 0x1e, 0x43,
	0x69, 0x1a, 0x06, 0xd3, 0x80, 0x12, 0x77, 0x78, 0x74, 0x7e, 0x6b, 0x6f, 0x83, 0x98, 0xbc, 0x77,
	0x8e, 0x36, 0x61, 0xfd, 0xd8, 0x3b, 0x25, 0x51, 0x77, 0x50, 0xeb, 0x45, 0x2c, 0x06, 0x95, 0x1f,
	0x55, 0x80, 0x79, 0xe1, 0xe8, 0x36, 0xc8, 0xd2, 0x41, 0x78, 0xab, 0xfa, 0x9c, 0xfa, 0x96, 0xdb,
	0xee, 0x5e, 0x75, 0xde, 0x2c, 0xef, 0xbc, 0xfb, 0x6f, 0xe1, 0xdd, 0xb5, 0xcf, 0x64, 0x5b, 0xd6,
	0x7f, 0x51, 0xa0, 0x7c, 0x13, 0x44, 0xbb, 0xb0, 0x1d, 0xb7, 0x97, 0x9e, 0xb5, 0xa8, 0x9f, 0xdd,
	0x87, 0xf7, 0xd3, 0x04, 0xd3, 0x8a, 0x3a, 0x57, 0x17, 0x1b, 0xb6, 0x5d, 0x56, 0xd0, 0x0e, 0x68,
	0x69, 0x4a, 0xbf, 0x6d, 0xdb, 0x46, 0xa7, 0x9c, 0x41, 0x35, 0xd8, 0x49, 0xa3, 0x56, 0x6f, 0x10,
	0x33, 0x54, 0xfd, 0x21, 0x6c, 0x2d, 0x7e, 0x5e, 0xa3, 0xa6, 0xe5, 0x93, 0x97, 0xcc, 0x8c, 0x7b,
	0xbd, 0x1c, 0xe9, 0xbf, 0x2a, 0x70, 0x6f, 0xe9, 0x2b, 0x19, 0xed, 0xb4, 0x17, 0x81, 0xf2, 0x72,
	0x8a, 0x01, 0x72, 0x01, 0xa5, 0xdf, 0x4d, 0xbe, 0x53, 0xa5, 0x56, 0xe3, 0x6e, 0x4f, 0xbf, 0x7c,
	0x87, 0x17, 0xe8, 0xed, 0x3d, 0x79, 0x75, 0x51, 0x55, 0x5e, 0x5f, 0x54, 0x95, 0x7f, 0x2f, 0xaa,
	0xca, 0xcf, 0x97, 0xd5, 0xb5, 0xd7, 0x97, 0xd5, 0xb5, 0xbf, 0x2f, 0xab, 0x6b, 0x5f, 0xeb, 0x63,
	0x8f, 0x3d, 0x9f, 0x1d, 0x35, 0x46, 0xc1, 0xa4, 0xb9, 0xe4, 0xbf, 0xd5, 0x51, 0x8e, 0xff, 0x0d,
	0xfa, 0xf8, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3b, 0xeb, 0x8c, 0x4e, 0x7d, 0x09, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VideoRenderingTaskList) > 0 {
		for iNdEx := len(m.VideoRenderingTaskList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VideoRenderingTaskList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.VideoRenderingTaskInfo != nil {
		{
			size, err := m.VideoRenderingTaskInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Worker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Worker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Worker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Reputation != nil {
		{
			size, err := m.Reputation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Worker_Reputation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Worker_Reputation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Worker_Reputation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Solutions != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Solutions))
		i--
		dAtA[i] = 0x20
	}
	if m.Validations != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Validations))
		i--
		dAtA[i] = 0x18
	}
	if m.Points != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Points))
		i--
		dAtA[i] = 0x10
	}
	if m.Stacked != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Stacked))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VideoRenderingTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideoRenderingTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VideoRenderingTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Threads) > 0 {
		for iNdEx := len(m.Threads) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Threads[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.InProgress {
		i--
		if m.InProgress {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.ThreadAmount != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ThreadAmount))
		i--
		dAtA[i] = 0x30
	}
	if m.EndFrame != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.EndFrame))
		i--
		dAtA[i] = 0x28
	}
	if m.StartFrame != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.StartFrame))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Requester) > 0 {
		i -= len(m.Requester)
		copy(dAtA[i:], m.Requester)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Requester)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TaskId) > 0 {
		i -= len(m.TaskId)
		copy(dAtA[i:], m.TaskId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TaskId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VideoRenderingThread) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideoRenderingThread) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VideoRenderingThread) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Validations) > 0 {
		for iNdEx := len(m.Validations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Validations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Solution != nil {
		{
			size, err := m.Solution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Workers) > 0 {
		for iNdEx := len(m.Workers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Workers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.InProgress {
		i--
		if m.InProgress {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.EndFrame != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.EndFrame))
		i--
		dAtA[i] = 0x18
	}
	if m.StartFrame != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.StartFrame))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ThreadId) > 0 {
		i -= len(m.ThreadId)
		copy(dAtA[i:], m.ThreadId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ThreadId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VideoRenderingThread_Solution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideoRenderingThread_Solution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VideoRenderingThread_Solution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Files) > 0 {
		for iNdEx := len(m.Files) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Files[iNdEx])
			copy(dAtA[i:], m.Files[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Files[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ProposedBy) > 0 {
		i -= len(m.ProposedBy)
		copy(dAtA[i:], m.ProposedBy)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ProposedBy)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VideoRenderingThread_Validation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideoRenderingThread_Validation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VideoRenderingThread_Validation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.EndFrame != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.EndFrame))
		i--
		dAtA[i] = 0x18
	}
	if m.StartFrame != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.StartFrame))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VideoRenderingTaskInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideoRenderingTaskInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VideoRenderingTaskInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NextId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.NextId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IndexedVideoRenderingTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexedVideoRenderingTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndexedVideoRenderingTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.VideoRenderingTask.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.VideoRenderingTaskInfo != nil {
		l = m.VideoRenderingTaskInfo.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.VideoRenderingTaskList) > 0 {
		for _, e := range m.VideoRenderingTaskList {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *Worker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	if m.Reputation != nil {
		l = m.Reputation.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Worker_Reputation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Stacked != 0 {
		n += 1 + sovTypes(uint64(m.Stacked))
	}
	if m.Points != 0 {
		n += 1 + sovTypes(uint64(m.Points))
	}
	if m.Validations != 0 {
		n += 1 + sovTypes(uint64(m.Validations))
	}
	if m.Solutions != 0 {
		n += 1 + sovTypes(uint64(m.Solutions))
	}
	return n
}

func (m *VideoRenderingTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Requester)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.StartFrame != 0 {
		n += 1 + sovTypes(uint64(m.StartFrame))
	}
	if m.EndFrame != 0 {
		n += 1 + sovTypes(uint64(m.EndFrame))
	}
	if m.ThreadAmount != 0 {
		n += 1 + sovTypes(uint64(m.ThreadAmount))
	}
	if m.InProgress {
		n += 2
	}
	if len(m.Threads) > 0 {
		for _, e := range m.Threads {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *VideoRenderingThread) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ThreadId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.StartFrame != 0 {
		n += 1 + sovTypes(uint64(m.StartFrame))
	}
	if m.EndFrame != 0 {
		n += 1 + sovTypes(uint64(m.EndFrame))
	}
	if m.InProgress {
		n += 2
	}
	if len(m.Workers) > 0 {
		for _, e := range m.Workers {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.Solution != nil {
		l = m.Solution.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Validations) > 0 {
		for _, e := range m.Validations {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *VideoRenderingThread_Solution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProposedBy)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Files) > 0 {
		for _, s := range m.Files {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *VideoRenderingThread_Validation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.StartFrame != 0 {
		n += 1 + sovTypes(uint64(m.StartFrame))
	}
	if m.EndFrame != 0 {
		n += 1 + sovTypes(uint64(m.EndFrame))
	}
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	return n
}

func (m *VideoRenderingTaskInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NextId != 0 {
		n += 1 + sovTypes(uint64(m.NextId))
	}
	return n
}

func (m *IndexedVideoRenderingTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.VideoRenderingTask.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoRenderingTaskInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VideoRenderingTaskInfo == nil {
				m.VideoRenderingTaskInfo = &VideoRenderingTaskInfo{}
			}
			if err := m.VideoRenderingTaskInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoRenderingTaskList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VideoRenderingTaskList = append(m.VideoRenderingTaskList, IndexedVideoRenderingTask{})
			if err := m.VideoRenderingTaskList[len(m.VideoRenderingTaskList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Worker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Worker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Worker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Worker_WorkerStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reputation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reputation == nil {
				m.Reputation = &Worker_Reputation{}
			}
			if err := m.Reputation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Worker_Reputation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reputation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reputation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stacked", wireType)
			}
			m.Stacked = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stacked |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Points", wireType)
			}
			m.Points = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Points |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validations", wireType)
			}
			m.Validations = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Validations |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Solutions", wireType)
			}
			m.Solutions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Solutions |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VideoRenderingTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideoRenderingTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideoRenderingTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requester", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requester = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartFrame", wireType)
			}
			m.StartFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartFrame |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndFrame", wireType)
			}
			m.EndFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndFrame |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadAmount", wireType)
			}
			m.ThreadAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThreadAmount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InProgress", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InProgress = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threads", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Threads = append(m.Threads, &VideoRenderingThread{})
			if err := m.Threads[len(m.Threads)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VideoRenderingThread) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideoRenderingThread: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideoRenderingThread: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartFrame", wireType)
			}
			m.StartFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartFrame |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndFrame", wireType)
			}
			m.EndFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndFrame |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InProgress", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InProgress = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Workers = append(m.Workers, &Worker{})
			if err := m.Workers[len(m.Workers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Solution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Solution == nil {
				m.Solution = &VideoRenderingThread_Solution{}
			}
			if err := m.Solution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validations = append(m.Validations, &VideoRenderingThread_Validation{})
			if err := m.Validations[len(m.Validations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VideoRenderingThread_Solution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Solution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Solution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Files", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Files = append(m.Files, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VideoRenderingThread_Validation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Validation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Validation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartFrame", wireType)
			}
			m.StartFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartFrame |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndFrame", wireType)
			}
			m.EndFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndFrame |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= VideoRenderingThread_Validation_ValidationStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VideoRenderingTaskInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideoRenderingTaskInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideoRenderingTaskInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextId", wireType)
			}
			m.NextId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexedVideoRenderingTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexedVideoRenderingTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexedVideoRenderingTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoRenderingTask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VideoRenderingTask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
