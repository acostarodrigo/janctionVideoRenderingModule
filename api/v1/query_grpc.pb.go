// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: janction/videoRendering/v1/query.proto

package videoRenderingv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_GetVideoRenderingTask_FullMethodName         = "/janction.videoRendering.v1.Query/GetVideoRenderingTask"
	Query_GetVideoRenderingLogs_FullMethodName         = "/janction.videoRendering.v1.Query/GetVideoRenderingLogs"
	Query_GetPendingVideoRenderingTasks_FullMethodName = "/janction.videoRendering.v1.Query/GetPendingVideoRenderingTasks"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// GetVideoRenderingTask returns the task based on the taskId
	GetVideoRenderingTask(ctx context.Context, in *QueryGetVideoRenderingTaskRequest, opts ...grpc.CallOption) (*QueryGetVideoRenderingTaskResponse, error)
	GetVideoRenderingLogs(ctx context.Context, in *QueryGetVideoRenderingLogsRequest, opts ...grpc.CallOption) (*QueryGetVideoRenderingLogsResponse, error)
	GetPendingVideoRenderingTasks(ctx context.Context, in *QueryGetPendingVideoRenderingTaskRequest, opts ...grpc.CallOption) (*QueryGetPendingVideoRenderingTaskResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) GetVideoRenderingTask(ctx context.Context, in *QueryGetVideoRenderingTaskRequest, opts ...grpc.CallOption) (*QueryGetVideoRenderingTaskResponse, error) {
	out := new(QueryGetVideoRenderingTaskResponse)
	err := c.cc.Invoke(ctx, Query_GetVideoRenderingTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetVideoRenderingLogs(ctx context.Context, in *QueryGetVideoRenderingLogsRequest, opts ...grpc.CallOption) (*QueryGetVideoRenderingLogsResponse, error) {
	out := new(QueryGetVideoRenderingLogsResponse)
	err := c.cc.Invoke(ctx, Query_GetVideoRenderingLogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPendingVideoRenderingTasks(ctx context.Context, in *QueryGetPendingVideoRenderingTaskRequest, opts ...grpc.CallOption) (*QueryGetPendingVideoRenderingTaskResponse, error) {
	out := new(QueryGetPendingVideoRenderingTaskResponse)
	err := c.cc.Invoke(ctx, Query_GetPendingVideoRenderingTasks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// GetVideoRenderingTask returns the task based on the taskId
	GetVideoRenderingTask(context.Context, *QueryGetVideoRenderingTaskRequest) (*QueryGetVideoRenderingTaskResponse, error)
	GetVideoRenderingLogs(context.Context, *QueryGetVideoRenderingLogsRequest) (*QueryGetVideoRenderingLogsResponse, error)
	GetPendingVideoRenderingTasks(context.Context, *QueryGetPendingVideoRenderingTaskRequest) (*QueryGetPendingVideoRenderingTaskResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) GetVideoRenderingTask(context.Context, *QueryGetVideoRenderingTaskRequest) (*QueryGetVideoRenderingTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoRenderingTask not implemented")
}
func (UnimplementedQueryServer) GetVideoRenderingLogs(context.Context, *QueryGetVideoRenderingLogsRequest) (*QueryGetVideoRenderingLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoRenderingLogs not implemented")
}
func (UnimplementedQueryServer) GetPendingVideoRenderingTasks(context.Context, *QueryGetPendingVideoRenderingTaskRequest) (*QueryGetPendingVideoRenderingTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPendingVideoRenderingTasks not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_GetVideoRenderingTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetVideoRenderingTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetVideoRenderingTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetVideoRenderingTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetVideoRenderingTask(ctx, req.(*QueryGetVideoRenderingTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetVideoRenderingLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetVideoRenderingLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetVideoRenderingLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetVideoRenderingLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetVideoRenderingLogs(ctx, req.(*QueryGetVideoRenderingLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPendingVideoRenderingTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPendingVideoRenderingTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPendingVideoRenderingTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetPendingVideoRenderingTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPendingVideoRenderingTasks(ctx, req.(*QueryGetPendingVideoRenderingTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "janction.videoRendering.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVideoRenderingTask",
			Handler:    _Query_GetVideoRenderingTask_Handler,
		},
		{
			MethodName: "GetVideoRenderingLogs",
			Handler:    _Query_GetVideoRenderingLogs_Handler,
		},
		{
			MethodName: "GetPendingVideoRenderingTasks",
			Handler:    _Query_GetPendingVideoRenderingTasks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "janction/videoRendering/v1/query.proto",
}
