// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: janction/videoRendering/v1/tx.proto

package videoRendering

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgCreateGame defines the Msg/CreateGame request type.
type MsgCreateVideoRenderingTask struct {
	// creator is the message sender.
	Creator    string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Cid        string `protobuf:"bytes,2,opt,name=cid,proto3" json:"cid,omitempty"`
	StartFrame uint32 `protobuf:"varint,3,opt,name=startFrame,proto3" json:"startFrame,omitempty"`
	EndFrame   uint32 `protobuf:"varint,4,opt,name=endFrame,proto3" json:"endFrame,omitempty"`
	Threads    uint32 `protobuf:"varint,5,opt,name=threads,proto3" json:"threads,omitempty"`
	Reward     uint64 `protobuf:"varint,6,opt,name=reward,proto3" json:"reward,omitempty"`
}

func (m *MsgCreateVideoRenderingTask) Reset()         { *m = MsgCreateVideoRenderingTask{} }
func (m *MsgCreateVideoRenderingTask) String() string { return proto.CompactTextString(m) }
func (*MsgCreateVideoRenderingTask) ProtoMessage()    {}
func (*MsgCreateVideoRenderingTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6250ca283f34de9, []int{0}
}
func (m *MsgCreateVideoRenderingTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateVideoRenderingTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateVideoRenderingTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateVideoRenderingTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateVideoRenderingTask.Merge(m, src)
}
func (m *MsgCreateVideoRenderingTask) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateVideoRenderingTask) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateVideoRenderingTask.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateVideoRenderingTask proto.InternalMessageInfo

func (m *MsgCreateVideoRenderingTask) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateVideoRenderingTask) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

func (m *MsgCreateVideoRenderingTask) GetStartFrame() uint32 {
	if m != nil {
		return m.StartFrame
	}
	return 0
}

func (m *MsgCreateVideoRenderingTask) GetEndFrame() uint32 {
	if m != nil {
		return m.EndFrame
	}
	return 0
}

func (m *MsgCreateVideoRenderingTask) GetThreads() uint32 {
	if m != nil {
		return m.Threads
	}
	return 0
}

func (m *MsgCreateVideoRenderingTask) GetReward() uint64 {
	if m != nil {
		return m.Reward
	}
	return 0
}

// MsgCreateGameResponse defines the Msg/CreateGame response type.
type MsgCreateVideoRenderingTaskResponse struct {
	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (m *MsgCreateVideoRenderingTaskResponse) Reset()         { *m = MsgCreateVideoRenderingTaskResponse{} }
func (m *MsgCreateVideoRenderingTaskResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateVideoRenderingTaskResponse) ProtoMessage()    {}
func (*MsgCreateVideoRenderingTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6250ca283f34de9, []int{1}
}
func (m *MsgCreateVideoRenderingTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateVideoRenderingTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateVideoRenderingTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateVideoRenderingTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateVideoRenderingTaskResponse.Merge(m, src)
}
func (m *MsgCreateVideoRenderingTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateVideoRenderingTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateVideoRenderingTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateVideoRenderingTaskResponse proto.InternalMessageInfo

func (m *MsgCreateVideoRenderingTaskResponse) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

type MsgAddWorker struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *MsgAddWorker) Reset()         { *m = MsgAddWorker{} }
func (m *MsgAddWorker) String() string { return proto.CompactTextString(m) }
func (*MsgAddWorker) ProtoMessage()    {}
func (*MsgAddWorker) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6250ca283f34de9, []int{2}
}
func (m *MsgAddWorker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddWorker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddWorker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddWorker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddWorker.Merge(m, src)
}
func (m *MsgAddWorker) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddWorker) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddWorker.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddWorker proto.InternalMessageInfo

func (m *MsgAddWorker) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type MsgAddWorkerResponse struct {
}

func (m *MsgAddWorkerResponse) Reset()         { *m = MsgAddWorkerResponse{} }
func (m *MsgAddWorkerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddWorkerResponse) ProtoMessage()    {}
func (*MsgAddWorkerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6250ca283f34de9, []int{3}
}
func (m *MsgAddWorkerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddWorkerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddWorkerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddWorkerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddWorkerResponse.Merge(m, src)
}
func (m *MsgAddWorkerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddWorkerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddWorkerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddWorkerResponse proto.InternalMessageInfo

type MsgSubscribeWorkerToTask struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	TaskId  string `protobuf:"bytes,2,opt,name=taskId,proto3" json:"taskId,omitempty"`
}

func (m *MsgSubscribeWorkerToTask) Reset()         { *m = MsgSubscribeWorkerToTask{} }
func (m *MsgSubscribeWorkerToTask) String() string { return proto.CompactTextString(m) }
func (*MsgSubscribeWorkerToTask) ProtoMessage()    {}
func (*MsgSubscribeWorkerToTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6250ca283f34de9, []int{4}
}
func (m *MsgSubscribeWorkerToTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubscribeWorkerToTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubscribeWorkerToTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubscribeWorkerToTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubscribeWorkerToTask.Merge(m, src)
}
func (m *MsgSubscribeWorkerToTask) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubscribeWorkerToTask) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubscribeWorkerToTask.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubscribeWorkerToTask proto.InternalMessageInfo

func (m *MsgSubscribeWorkerToTask) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *MsgSubscribeWorkerToTask) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

type MsgSubscribeWorkerToTaskResponse struct {
	ThreadId string `protobuf:"bytes,1,opt,name=threadId,proto3" json:"threadId,omitempty"`
}

func (m *MsgSubscribeWorkerToTaskResponse) Reset()         { *m = MsgSubscribeWorkerToTaskResponse{} }
func (m *MsgSubscribeWorkerToTaskResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubscribeWorkerToTaskResponse) ProtoMessage()    {}
func (*MsgSubscribeWorkerToTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6250ca283f34de9, []int{5}
}
func (m *MsgSubscribeWorkerToTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubscribeWorkerToTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubscribeWorkerToTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubscribeWorkerToTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubscribeWorkerToTaskResponse.Merge(m, src)
}
func (m *MsgSubscribeWorkerToTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubscribeWorkerToTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubscribeWorkerToTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubscribeWorkerToTaskResponse proto.InternalMessageInfo

func (m *MsgSubscribeWorkerToTaskResponse) GetThreadId() string {
	if m != nil {
		return m.ThreadId
	}
	return ""
}

// Msg to Propose a solution to an specific thread
// Actual solution is a map of hashes
type MsgProposeSolution struct {
	Creator  string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	TaskId   string   `protobuf:"bytes,2,opt,name=taskId,proto3" json:"taskId,omitempty"`
	ThreadId string   `protobuf:"bytes,3,opt,name=threadId,proto3" json:"threadId,omitempty"`
	Solution []string `protobuf:"bytes,4,rep,name=solution,proto3" json:"solution,omitempty"`
}

func (m *MsgProposeSolution) Reset()         { *m = MsgProposeSolution{} }
func (m *MsgProposeSolution) String() string { return proto.CompactTextString(m) }
func (*MsgProposeSolution) ProtoMessage()    {}
func (*MsgProposeSolution) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6250ca283f34de9, []int{6}
}
func (m *MsgProposeSolution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProposeSolution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProposeSolution.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProposeSolution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProposeSolution.Merge(m, src)
}
func (m *MsgProposeSolution) XXX_Size() int {
	return m.Size()
}
func (m *MsgProposeSolution) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProposeSolution.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProposeSolution proto.InternalMessageInfo

func (m *MsgProposeSolution) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgProposeSolution) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *MsgProposeSolution) GetThreadId() string {
	if m != nil {
		return m.ThreadId
	}
	return ""
}

func (m *MsgProposeSolution) GetSolution() []string {
	if m != nil {
		return m.Solution
	}
	return nil
}

// no response needed to a proposed solution
type MsgProposeSolutionResponse struct {
}

func (m *MsgProposeSolutionResponse) Reset()         { *m = MsgProposeSolutionResponse{} }
func (m *MsgProposeSolutionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgProposeSolutionResponse) ProtoMessage()    {}
func (*MsgProposeSolutionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6250ca283f34de9, []int{7}
}
func (m *MsgProposeSolutionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProposeSolutionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProposeSolutionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProposeSolutionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProposeSolutionResponse.Merge(m, src)
}
func (m *MsgProposeSolutionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgProposeSolutionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProposeSolutionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProposeSolutionResponse proto.InternalMessageInfo

type MsgValidateSolution struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	TaskId      string `protobuf:"bytes,2,opt,name=taskId,proto3" json:"taskId,omitempty"`
	ThreadId    string `protobuf:"bytes,3,opt,name=threadId,proto3" json:"threadId,omitempty"`
	AmountFiles uint64 `protobuf:"varint,4,opt,name=amount_files,json=amountFiles,proto3" json:"amount_files,omitempty"`
	Valid       bool   `protobuf:"varint,5,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (m *MsgValidateSolution) Reset()         { *m = MsgValidateSolution{} }
func (m *MsgValidateSolution) String() string { return proto.CompactTextString(m) }
func (*MsgValidateSolution) ProtoMessage()    {}
func (*MsgValidateSolution) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6250ca283f34de9, []int{8}
}
func (m *MsgValidateSolution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgValidateSolution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgValidateSolution.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgValidateSolution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgValidateSolution.Merge(m, src)
}
func (m *MsgValidateSolution) XXX_Size() int {
	return m.Size()
}
func (m *MsgValidateSolution) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgValidateSolution.DiscardUnknown(m)
}

var xxx_messageInfo_MsgValidateSolution proto.InternalMessageInfo

func (m *MsgValidateSolution) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgValidateSolution) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *MsgValidateSolution) GetThreadId() string {
	if m != nil {
		return m.ThreadId
	}
	return ""
}

func (m *MsgValidateSolution) GetAmountFiles() uint64 {
	if m != nil {
		return m.AmountFiles
	}
	return 0
}

func (m *MsgValidateSolution) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

type MsgValidateSolutionResponse struct {
}

func (m *MsgValidateSolutionResponse) Reset()         { *m = MsgValidateSolutionResponse{} }
func (m *MsgValidateSolutionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgValidateSolutionResponse) ProtoMessage()    {}
func (*MsgValidateSolutionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6250ca283f34de9, []int{9}
}
func (m *MsgValidateSolutionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgValidateSolutionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgValidateSolutionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgValidateSolutionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgValidateSolutionResponse.Merge(m, src)
}
func (m *MsgValidateSolutionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgValidateSolutionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgValidateSolutionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgValidateSolutionResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateVideoRenderingTask)(nil), "janction.videoRendering.v1.MsgCreateVideoRenderingTask")
	proto.RegisterType((*MsgCreateVideoRenderingTaskResponse)(nil), "janction.videoRendering.v1.MsgCreateVideoRenderingTaskResponse")
	proto.RegisterType((*MsgAddWorker)(nil), "janction.videoRendering.v1.MsgAddWorker")
	proto.RegisterType((*MsgAddWorkerResponse)(nil), "janction.videoRendering.v1.MsgAddWorkerResponse")
	proto.RegisterType((*MsgSubscribeWorkerToTask)(nil), "janction.videoRendering.v1.MsgSubscribeWorkerToTask")
	proto.RegisterType((*MsgSubscribeWorkerToTaskResponse)(nil), "janction.videoRendering.v1.MsgSubscribeWorkerToTaskResponse")
	proto.RegisterType((*MsgProposeSolution)(nil), "janction.videoRendering.v1.MsgProposeSolution")
	proto.RegisterType((*MsgProposeSolutionResponse)(nil), "janction.videoRendering.v1.MsgProposeSolutionResponse")
	proto.RegisterType((*MsgValidateSolution)(nil), "janction.videoRendering.v1.MsgValidateSolution")
	proto.RegisterType((*MsgValidateSolutionResponse)(nil), "janction.videoRendering.v1.MsgValidateSolutionResponse")
}

func init() {
	proto.RegisterFile("janction/videoRendering/v1/tx.proto", fileDescriptor_b6250ca283f34de9)
}

var fileDescriptor_b6250ca283f34de9 = []byte{
	// 629 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0x4f, 0x4f, 0xd4, 0x40,
	0x14, 0x67, 0xdc, 0x3f, 0xc0, 0x13, 0x23, 0xa9, 0x08, 0x75, 0xd4, 0x66, 0x2d, 0x89, 0xd9, 0x70,
	0x68, 0x45, 0x0d, 0x24, 0x86, 0x60, 0xd4, 0x84, 0x84, 0xc3, 0x26, 0xa6, 0x10, 0x4c, 0xb8, 0x90,
	0xd9, 0xce, 0x38, 0x54, 0x68, 0x67, 0x33, 0xd3, 0x5d, 0x25, 0xf1, 0x60, 0xbc, 0xea, 0xc1, 0x44,
	0x3f, 0x85, 0x27, 0xbe, 0x84, 0x89, 0x47, 0x8e, 0x1e, 0x0d, 0x7b, 0xe0, 0x6b, 0x98, 0xfe, 0x95,
	0x2d, 0x74, 0x57, 0x48, 0xbc, 0xcd, 0xef, 0xfd, 0xf9, 0xfd, 0xde, 0x7b, 0xfb, 0xde, 0x16, 0xe6,
	0xdf, 0x90, 0xc0, 0x0d, 0x3d, 0x11, 0xd8, 0x3d, 0x8f, 0x32, 0xe1, 0xb0, 0x80, 0x32, 0xe9, 0x05,
	0xdc, 0xee, 0x2d, 0xda, 0xe1, 0x3b, 0xab, 0x23, 0x45, 0x28, 0x34, 0x9c, 0x05, 0x59, 0x83, 0x41,
	0x56, 0x6f, 0x11, 0xcf, 0xb9, 0x42, 0xf9, 0x42, 0xd9, 0xbe, 0x8a, 0x73, 0x7c, 0xc5, 0x93, 0x24,
	0x3c, 0xc3, 0x05, 0x17, 0xf1, 0xd3, 0x8e, 0x5e, 0xa9, 0xf5, 0xfe, 0x30, 0xbd, 0x83, 0x0e, 0x53,
	0x69, 0xdc, 0xad, 0x84, 0x76, 0x27, 0x21, 0x48, 0x40, 0xe2, 0x32, 0x7f, 0x20, 0xb8, 0xdd, 0x52,
	0xfc, 0x85, 0x64, 0x24, 0x64, 0x5b, 0x03, 0x2c, 0x9b, 0x44, 0xed, 0x69, 0x3a, 0x8c, 0xbb, 0x91,
	0x4f, 0x48, 0x1d, 0x35, 0x50, 0x73, 0xd2, 0xc9, 0xa0, 0x36, 0x0d, 0x15, 0xd7, 0xa3, 0xfa, 0x95,
	0xd8, 0x1a, 0x3d, 0x35, 0x03, 0x40, 0x85, 0x44, 0x86, 0x6b, 0x92, 0xf8, 0x4c, 0xaf, 0x34, 0x50,
	0xf3, 0x9a, 0x73, 0xca, 0xa2, 0x61, 0x98, 0x60, 0x01, 0x4d, 0xbc, 0xd5, 0xd8, 0x9b, 0xe3, 0x48,
	0x27, 0xdc, 0x95, 0x8c, 0x50, 0xa5, 0xd7, 0x62, 0x57, 0x06, 0xb5, 0x59, 0xa8, 0x4b, 0xf6, 0x96,
	0x48, 0xaa, 0xd7, 0x1b, 0xa8, 0x59, 0x75, 0x52, 0xf4, 0x64, 0xea, 0xe3, 0xc9, 0xe1, 0x42, 0x56,
	0x8d, 0xb9, 0x0a, 0xf3, 0x43, 0xda, 0x70, 0x98, 0xea, 0x88, 0x40, 0x31, 0x6d, 0x0e, 0xc6, 0x43,
	0xa2, 0xf6, 0x76, 0x3c, 0x9a, 0xb6, 0x53, 0x8f, 0xe0, 0x3a, 0x35, 0x97, 0x60, 0xaa, 0xa5, 0xf8,
	0x33, 0x4a, 0x5f, 0x09, 0xb9, 0xc7, 0x64, 0x79, 0xdf, 0x05, 0xdd, 0x59, 0x98, 0x39, 0x9d, 0x97,
	0x09, 0x99, 0xdb, 0xa0, 0xb7, 0x14, 0xdf, 0xe8, 0xb6, 0x95, 0x2b, 0xbd, 0x36, 0x4b, 0xbc, 0x9b,
	0x22, 0x9b, 0x29, 0xa1, 0x54, 0x32, 0xa5, 0x32, 0xee, 0x14, 0x46, 0xbd, 0x26, 0xf5, 0xa4, 0x63,
	0x4d, 0x51, 0xaa, 0x99, 0x46, 0x99, 0xab, 0xd0, 0x28, 0xe3, 0xce, 0x1b, 0xc5, 0x30, 0x91, 0x0c,
	0x70, 0x3d, 0xeb, 0x34, 0xc7, 0xe6, 0x67, 0x04, 0x5a, 0x4b, 0xf1, 0x97, 0x52, 0x74, 0x84, 0x62,
	0x1b, 0x62, 0xbf, 0x1b, 0xed, 0xd0, 0x90, 0x9f, 0xba, 0xa4, 0xac, 0x01, 0x91, 0xca, 0xa0, 0x48,
	0xe4, 0x53, 0x29, 0xb3, 0x5e, 0x6d, 0x54, 0x22, 0x5f, 0x86, 0x0b, 0x23, 0xbc, 0x03, 0xf8, 0x6c,
	0x35, 0xf9, 0x20, 0xbf, 0x23, 0xb8, 0xd1, 0x52, 0x7c, 0x8b, 0xec, 0x7b, 0x94, 0x84, 0xff, 0xab,
	0xda, 0x7b, 0x30, 0x45, 0x7c, 0xd1, 0x0d, 0xc2, 0x9d, 0xd7, 0xde, 0x3e, 0x53, 0xf1, 0x7a, 0x56,
	0x9d, 0xab, 0x89, 0x6d, 0x2d, 0x32, 0x69, 0x33, 0x50, 0xeb, 0x45, 0x45, 0xc4, 0xfb, 0x39, 0xe1,
	0x24, 0xa0, 0xd0, 0xca, 0xdd, 0xf8, 0x98, 0x8a, 0xb5, 0x66, 0xbd, 0x3c, 0xfc, 0x5a, 0x83, 0x4a,
	0x4b, 0x71, 0xed, 0x1b, 0x02, 0xbd, 0xf4, 0xe2, 0x96, 0xad, 0xf2, 0x3f, 0x08, 0x6b, 0xc8, 0x8e,
	0xe3, 0xa7, 0x97, 0x4c, 0xcc, 0x77, 0x86, 0xc3, 0xe4, 0xdf, 0x03, 0x68, 0x8e, 0x60, 0xcb, 0x23,
	0xf1, 0x83, 0x7f, 0x8d, 0xcc, 0x85, 0x3e, 0x21, 0xb8, 0x79, 0xfe, 0x69, 0x3c, 0x1e, 0xc1, 0x75,
	0x6e, 0x16, 0x5e, 0xb9, 0x4c, 0x56, 0x5e, 0xcd, 0x01, 0x5c, 0x2f, 0x9e, 0x82, 0x35, 0x82, 0xb0,
	0x10, 0x8f, 0x97, 0x2e, 0x16, 0x9f, 0x4b, 0xbf, 0x87, 0xe9, 0x33, 0x8b, 0x6d, 0x8f, 0xe0, 0x2a,
	0x26, 0xe0, 0xe5, 0x0b, 0x26, 0x64, 0xea, 0xb8, 0xf6, 0xe1, 0xe4, 0x70, 0x01, 0x3d, 0x5f, 0xf9,
	0x79, 0x6c, 0xa0, 0xa3, 0x63, 0x03, 0xfd, 0x3e, 0x36, 0xd0, 0x97, 0xbe, 0x31, 0x76, 0xd4, 0x37,
	0xc6, 0x7e, 0xf5, 0x8d, 0xb1, 0x6d, 0x93, 0x7b, 0xe1, 0x6e, 0xb7, 0x6d, 0xb9, 0xc2, 0xb7, 0x4b,
	0x3e, 0x35, 0xed, 0x7a, 0xfc, 0x1d, 0x79, 0xf4, 0x27, 0x00, 0x00, 0xff, 0xff, 0xe5, 0xb9, 0x26,
	0xdc, 0xfc, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// CreateGame create a game.
	CreateVideoRenderingTask(ctx context.Context, in *MsgCreateVideoRenderingTask, opts ...grpc.CallOption) (*MsgCreateVideoRenderingTaskResponse, error)
	// Adds a new worker
	AddWorker(ctx context.Context, in *MsgAddWorker, opts ...grpc.CallOption) (*MsgAddWorkerResponse, error)
	SubscribeWorkerToTask(ctx context.Context, in *MsgSubscribeWorkerToTask, opts ...grpc.CallOption) (*MsgSubscribeWorkerToTaskResponse, error)
	// Propose a solution for the test of the nodes to validate
	ProposeSolution(ctx context.Context, in *MsgProposeSolution, opts ...grpc.CallOption) (*MsgProposeSolutionResponse, error)
	// Propose a solution for the test of the nodes to validate
	ValidateSolution(ctx context.Context, in *MsgValidateSolution, opts ...grpc.CallOption) (*MsgValidateSolutionResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateVideoRenderingTask(ctx context.Context, in *MsgCreateVideoRenderingTask, opts ...grpc.CallOption) (*MsgCreateVideoRenderingTaskResponse, error) {
	out := new(MsgCreateVideoRenderingTaskResponse)
	err := c.cc.Invoke(ctx, "/janction.videoRendering.v1.Msg/CreateVideoRenderingTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddWorker(ctx context.Context, in *MsgAddWorker, opts ...grpc.CallOption) (*MsgAddWorkerResponse, error) {
	out := new(MsgAddWorkerResponse)
	err := c.cc.Invoke(ctx, "/janction.videoRendering.v1.Msg/AddWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubscribeWorkerToTask(ctx context.Context, in *MsgSubscribeWorkerToTask, opts ...grpc.CallOption) (*MsgSubscribeWorkerToTaskResponse, error) {
	out := new(MsgSubscribeWorkerToTaskResponse)
	err := c.cc.Invoke(ctx, "/janction.videoRendering.v1.Msg/SubscribeWorkerToTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ProposeSolution(ctx context.Context, in *MsgProposeSolution, opts ...grpc.CallOption) (*MsgProposeSolutionResponse, error) {
	out := new(MsgProposeSolutionResponse)
	err := c.cc.Invoke(ctx, "/janction.videoRendering.v1.Msg/ProposeSolution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ValidateSolution(ctx context.Context, in *MsgValidateSolution, opts ...grpc.CallOption) (*MsgValidateSolutionResponse, error) {
	out := new(MsgValidateSolutionResponse)
	err := c.cc.Invoke(ctx, "/janction.videoRendering.v1.Msg/ValidateSolution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// CreateGame create a game.
	CreateVideoRenderingTask(context.Context, *MsgCreateVideoRenderingTask) (*MsgCreateVideoRenderingTaskResponse, error)
	// Adds a new worker
	AddWorker(context.Context, *MsgAddWorker) (*MsgAddWorkerResponse, error)
	SubscribeWorkerToTask(context.Context, *MsgSubscribeWorkerToTask) (*MsgSubscribeWorkerToTaskResponse, error)
	// Propose a solution for the test of the nodes to validate
	ProposeSolution(context.Context, *MsgProposeSolution) (*MsgProposeSolutionResponse, error)
	// Propose a solution for the test of the nodes to validate
	ValidateSolution(context.Context, *MsgValidateSolution) (*MsgValidateSolutionResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateVideoRenderingTask(ctx context.Context, req *MsgCreateVideoRenderingTask) (*MsgCreateVideoRenderingTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVideoRenderingTask not implemented")
}
func (*UnimplementedMsgServer) AddWorker(ctx context.Context, req *MsgAddWorker) (*MsgAddWorkerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWorker not implemented")
}
func (*UnimplementedMsgServer) SubscribeWorkerToTask(ctx context.Context, req *MsgSubscribeWorkerToTask) (*MsgSubscribeWorkerToTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeWorkerToTask not implemented")
}
func (*UnimplementedMsgServer) ProposeSolution(ctx context.Context, req *MsgProposeSolution) (*MsgProposeSolutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposeSolution not implemented")
}
func (*UnimplementedMsgServer) ValidateSolution(ctx context.Context, req *MsgValidateSolution) (*MsgValidateSolutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateSolution not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateVideoRenderingTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateVideoRenderingTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateVideoRenderingTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/janction.videoRendering.v1.Msg/CreateVideoRenderingTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateVideoRenderingTask(ctx, req.(*MsgCreateVideoRenderingTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddWorker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/janction.videoRendering.v1.Msg/AddWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddWorker(ctx, req.(*MsgAddWorker))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubscribeWorkerToTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubscribeWorkerToTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubscribeWorkerToTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/janction.videoRendering.v1.Msg/SubscribeWorkerToTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubscribeWorkerToTask(ctx, req.(*MsgSubscribeWorkerToTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ProposeSolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgProposeSolution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ProposeSolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/janction.videoRendering.v1.Msg/ProposeSolution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ProposeSolution(ctx, req.(*MsgProposeSolution))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ValidateSolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgValidateSolution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ValidateSolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/janction.videoRendering.v1.Msg/ValidateSolution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ValidateSolution(ctx, req.(*MsgValidateSolution))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "janction.videoRendering.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVideoRenderingTask",
			Handler:    _Msg_CreateVideoRenderingTask_Handler,
		},
		{
			MethodName: "AddWorker",
			Handler:    _Msg_AddWorker_Handler,
		},
		{
			MethodName: "SubscribeWorkerToTask",
			Handler:    _Msg_SubscribeWorkerToTask_Handler,
		},
		{
			MethodName: "ProposeSolution",
			Handler:    _Msg_ProposeSolution_Handler,
		},
		{
			MethodName: "ValidateSolution",
			Handler:    _Msg_ValidateSolution_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "janction/videoRendering/v1/tx.proto",
}

func (m *MsgCreateVideoRenderingTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateVideoRenderingTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateVideoRenderingTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Reward != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Reward))
		i--
		dAtA[i] = 0x30
	}
	if m.Threads != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Threads))
		i--
		dAtA[i] = 0x28
	}
	if m.EndFrame != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.EndFrame))
		i--
		dAtA[i] = 0x20
	}
	if m.StartFrame != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StartFrame))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateVideoRenderingTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateVideoRenderingTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateVideoRenderingTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TaskId) > 0 {
		i -= len(m.TaskId)
		copy(dAtA[i:], m.TaskId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TaskId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddWorker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddWorker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddWorker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddWorkerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddWorkerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddWorkerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSubscribeWorkerToTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubscribeWorkerToTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubscribeWorkerToTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TaskId) > 0 {
		i -= len(m.TaskId)
		copy(dAtA[i:], m.TaskId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TaskId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubscribeWorkerToTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubscribeWorkerToTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubscribeWorkerToTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ThreadId) > 0 {
		i -= len(m.ThreadId)
		copy(dAtA[i:], m.ThreadId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ThreadId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgProposeSolution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProposeSolution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProposeSolution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Solution) > 0 {
		for iNdEx := len(m.Solution) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Solution[iNdEx])
			copy(dAtA[i:], m.Solution[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Solution[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ThreadId) > 0 {
		i -= len(m.ThreadId)
		copy(dAtA[i:], m.ThreadId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ThreadId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TaskId) > 0 {
		i -= len(m.TaskId)
		copy(dAtA[i:], m.TaskId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TaskId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgProposeSolutionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProposeSolutionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProposeSolutionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgValidateSolution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgValidateSolution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgValidateSolution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Valid {
		i--
		if m.Valid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.AmountFiles != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.AmountFiles))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ThreadId) > 0 {
		i -= len(m.ThreadId)
		copy(dAtA[i:], m.ThreadId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ThreadId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TaskId) > 0 {
		i -= len(m.TaskId)
		copy(dAtA[i:], m.TaskId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TaskId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgValidateSolutionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgValidateSolutionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgValidateSolutionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateVideoRenderingTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.StartFrame != 0 {
		n += 1 + sovTx(uint64(m.StartFrame))
	}
	if m.EndFrame != 0 {
		n += 1 + sovTx(uint64(m.EndFrame))
	}
	if m.Threads != 0 {
		n += 1 + sovTx(uint64(m.Threads))
	}
	if m.Reward != 0 {
		n += 1 + sovTx(uint64(m.Reward))
	}
	return n
}

func (m *MsgCreateVideoRenderingTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddWorker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddWorkerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSubscribeWorkerToTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSubscribeWorkerToTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ThreadId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgProposeSolution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ThreadId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Solution) > 0 {
		for _, s := range m.Solution {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgProposeSolutionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgValidateSolution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ThreadId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.AmountFiles != 0 {
		n += 1 + sovTx(uint64(m.AmountFiles))
	}
	if m.Valid {
		n += 2
	}
	return n
}

func (m *MsgValidateSolutionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateVideoRenderingTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateVideoRenderingTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateVideoRenderingTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartFrame", wireType)
			}
			m.StartFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartFrame |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndFrame", wireType)
			}
			m.EndFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndFrame |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threads", wireType)
			}
			m.Threads = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Threads |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			m.Reward = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reward |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateVideoRenderingTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateVideoRenderingTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateVideoRenderingTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddWorker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddWorker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddWorker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddWorkerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddWorkerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddWorkerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubscribeWorkerToTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubscribeWorkerToTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubscribeWorkerToTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubscribeWorkerToTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubscribeWorkerToTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubscribeWorkerToTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProposeSolution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProposeSolution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProposeSolution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Solution", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Solution = append(m.Solution, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProposeSolutionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProposeSolutionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProposeSolutionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgValidateSolution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgValidateSolution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgValidateSolution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountFiles", wireType)
			}
			m.AmountFiles = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AmountFiles |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Valid = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgValidateSolutionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgValidateSolutionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgValidateSolutionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
