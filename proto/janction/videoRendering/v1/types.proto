syntax = "proto3";
package janction.videoRendering.v1;

option go_package = "github.com/janction/videoRendering";

import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";



// Params defines the parameters of the module.
message Params {
  string video_rendering_key_name = 1;
}

// GenesisState is the state that must be provided at genesis.
message GenesisState {
  // params defines all the parameters of the module.
  Params params = 1 [ (gogoproto.nullable) = false ];

  // Video Rendering Task index
  VideoRenderingTaskInfo videoRenderingTaskInfo = 3 [(gogoproto.nullable) = false];

  // List of Video Rendering tasks
  repeated IndexedVideoRenderingTask videoRenderingTaskList = 4 [(gogoproto.nullable) = false];
  
  // List of Workers
  repeated  Worker workers = 5 [(gogoproto.nullable) = false];
}


message Worker {
  message Reputation {
    uint64 stacked = 1;
    int64 points = 2;
    uint32 validations = 3;
    uint32 solutions = 4;
  }

  string address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  Reputation reputation = 3;
  bool enabled = 4;
  string current_task_id = 5;
  uint32 current_thread_index = 6;
}




/*
  Video Rendering Task
  @cid the IPFS CID submitted by a task requester
*/
message VideoRenderingTask {
  string taskId = 1;
  string requester = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string cid = 3;
  uint32 start_frame = 4;
  uint32 end_frame = 5;
  uint32 threadAmount = 6;
  bool completed = 7;
  uint64 reward = 8;
  repeated VideoRenderingThread  threads = 9;
}

  /*
    A Video Rendering Thread is the smallest unit of work for a Task. 
    Workers will try to complete a thread as soon as possible to submit first a solution

  */
  message VideoRenderingThread {
    string thread_id = 1;
    string task_id = 2;
    uint32 start_frame = 3;
    uint32 end_frame = 4;
    bool completed = 5;
    repeated string workers = 6;
    Solution solution = 7;
    repeated Validation validations = 8;
    

    message Solution {
      string proposed_by = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
      repeated string hashes = 2;
      string files = 3;
    }

    message Validation {
      string validator = 1[(cosmos_proto.scalar) = "cosmos.AddressString"];
      uint64 amount_files = 2;
      bool valid = 3;
      bool is_reverse = 4;
    }
  }

  // Stores information about the Video Rendering  task 
  message VideoRenderingTaskInfo {
    uint64 nextId = 1;
  }
  
  // Stores the Video Rendering Task with the index
  message IndexedVideoRenderingTask {
    string index = 1;
    VideoRenderingTask videoRenderingTask = 2 [(gogoproto.nullable) = false];
  }

  message VideoRenderingLogs {
    message VideoRenderingLog {
      enum SEVERITY{
        INFO = 0;
        SUCCESS = 1;
        ERROR = 2;
      }
        string log = 2;
        int64 timestamp = 3;
        SEVERITY severity = 4;
    }
    string threadId = 1;
    repeated VideoRenderingLog logs =2;
}