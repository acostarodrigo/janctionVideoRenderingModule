// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: janction/videoRendering/v1/query.proto

package videoRendering

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryGetGameRequest is the request type for the Query/GetGame RPC
// method.
type QueryGetVideoRenderingTaskRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetVideoRenderingTaskRequest) Reset()         { *m = QueryGetVideoRenderingTaskRequest{} }
func (m *QueryGetVideoRenderingTaskRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetVideoRenderingTaskRequest) ProtoMessage()    {}
func (*QueryGetVideoRenderingTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6439ce36a3757d86, []int{0}
}
func (m *QueryGetVideoRenderingTaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetVideoRenderingTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetVideoRenderingTaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetVideoRenderingTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetVideoRenderingTaskRequest.Merge(m, src)
}
func (m *QueryGetVideoRenderingTaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetVideoRenderingTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetVideoRenderingTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetVideoRenderingTaskRequest proto.InternalMessageInfo

func (m *QueryGetVideoRenderingTaskRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

// QueryGetGameResponse is the response type for the Query/GetGame RPC
// method.
type QueryGetVideoRenderingTaskResponse struct {
	// Game defines the game at the requested index.
	VideoRenderingTask *VideoRenderingTask `protobuf:"bytes,1,opt,name=video_rendering_task,json=videoRenderingTask,proto3" json:"video_rendering_task,omitempty"`
}

func (m *QueryGetVideoRenderingTaskResponse) Reset()         { *m = QueryGetVideoRenderingTaskResponse{} }
func (m *QueryGetVideoRenderingTaskResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetVideoRenderingTaskResponse) ProtoMessage()    {}
func (*QueryGetVideoRenderingTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6439ce36a3757d86, []int{1}
}
func (m *QueryGetVideoRenderingTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetVideoRenderingTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetVideoRenderingTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetVideoRenderingTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetVideoRenderingTaskResponse.Merge(m, src)
}
func (m *QueryGetVideoRenderingTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetVideoRenderingTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetVideoRenderingTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetVideoRenderingTaskResponse proto.InternalMessageInfo

func (m *QueryGetVideoRenderingTaskResponse) GetVideoRenderingTask() *VideoRenderingTask {
	if m != nil {
		return m.VideoRenderingTask
	}
	return nil
}

// QueryGetGameRequest is the request type for the Query/GetGame RPC
// method.
type QueryGetVideoRenderingLogsRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetVideoRenderingLogsRequest) Reset()         { *m = QueryGetVideoRenderingLogsRequest{} }
func (m *QueryGetVideoRenderingLogsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetVideoRenderingLogsRequest) ProtoMessage()    {}
func (*QueryGetVideoRenderingLogsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6439ce36a3757d86, []int{2}
}
func (m *QueryGetVideoRenderingLogsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetVideoRenderingLogsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetVideoRenderingLogsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetVideoRenderingLogsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetVideoRenderingLogsRequest.Merge(m, src)
}
func (m *QueryGetVideoRenderingLogsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetVideoRenderingLogsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetVideoRenderingLogsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetVideoRenderingLogsRequest proto.InternalMessageInfo

func (m *QueryGetVideoRenderingLogsRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

// QueryGetGameResponse is the response type for the Query/GetGame RPC
// method.
type QueryGetVideoRenderingLogsResponse struct {
	// Game defines the game at the requested index.
	VideoRenderingLogs *VideoRenderingLogs `protobuf:"bytes,1,opt,name=video_rendering_logs,json=videoRenderingLogs,proto3" json:"video_rendering_logs,omitempty"`
}

func (m *QueryGetVideoRenderingLogsResponse) Reset()         { *m = QueryGetVideoRenderingLogsResponse{} }
func (m *QueryGetVideoRenderingLogsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetVideoRenderingLogsResponse) ProtoMessage()    {}
func (*QueryGetVideoRenderingLogsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6439ce36a3757d86, []int{3}
}
func (m *QueryGetVideoRenderingLogsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetVideoRenderingLogsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetVideoRenderingLogsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetVideoRenderingLogsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetVideoRenderingLogsResponse.Merge(m, src)
}
func (m *QueryGetVideoRenderingLogsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetVideoRenderingLogsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetVideoRenderingLogsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetVideoRenderingLogsResponse proto.InternalMessageInfo

func (m *QueryGetVideoRenderingLogsResponse) GetVideoRenderingLogs() *VideoRenderingLogs {
	if m != nil {
		return m.VideoRenderingLogs
	}
	return nil
}

type QueryGetPendingVideoRenderingTaskRequest struct {
}

func (m *QueryGetPendingVideoRenderingTaskRequest) Reset() {
	*m = QueryGetPendingVideoRenderingTaskRequest{}
}
func (m *QueryGetPendingVideoRenderingTaskRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPendingVideoRenderingTaskRequest) ProtoMessage()    {}
func (*QueryGetPendingVideoRenderingTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6439ce36a3757d86, []int{4}
}
func (m *QueryGetPendingVideoRenderingTaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPendingVideoRenderingTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPendingVideoRenderingTaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPendingVideoRenderingTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPendingVideoRenderingTaskRequest.Merge(m, src)
}
func (m *QueryGetPendingVideoRenderingTaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPendingVideoRenderingTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPendingVideoRenderingTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPendingVideoRenderingTaskRequest proto.InternalMessageInfo

type QueryGetPendingVideoRenderingTaskResponse struct {
	VideoRenderingTasks []*VideoRenderingTask `protobuf:"bytes,1,rep,name=video_rendering_tasks,json=videoRenderingTasks,proto3" json:"video_rendering_tasks,omitempty"`
}

func (m *QueryGetPendingVideoRenderingTaskResponse) Reset() {
	*m = QueryGetPendingVideoRenderingTaskResponse{}
}
func (m *QueryGetPendingVideoRenderingTaskResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetPendingVideoRenderingTaskResponse) ProtoMessage() {}
func (*QueryGetPendingVideoRenderingTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6439ce36a3757d86, []int{5}
}
func (m *QueryGetPendingVideoRenderingTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPendingVideoRenderingTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPendingVideoRenderingTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPendingVideoRenderingTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPendingVideoRenderingTaskResponse.Merge(m, src)
}
func (m *QueryGetPendingVideoRenderingTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPendingVideoRenderingTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPendingVideoRenderingTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPendingVideoRenderingTaskResponse proto.InternalMessageInfo

func (m *QueryGetPendingVideoRenderingTaskResponse) GetVideoRenderingTasks() []*VideoRenderingTask {
	if m != nil {
		return m.VideoRenderingTasks
	}
	return nil
}

type QueryGetWorkerRequest struct {
	Worker string `protobuf:"bytes,1,opt,name=worker,proto3" json:"worker,omitempty"`
}

func (m *QueryGetWorkerRequest) Reset()         { *m = QueryGetWorkerRequest{} }
func (m *QueryGetWorkerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetWorkerRequest) ProtoMessage()    {}
func (*QueryGetWorkerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6439ce36a3757d86, []int{6}
}
func (m *QueryGetWorkerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetWorkerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetWorkerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetWorkerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetWorkerRequest.Merge(m, src)
}
func (m *QueryGetWorkerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetWorkerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetWorkerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetWorkerRequest proto.InternalMessageInfo

func (m *QueryGetWorkerRequest) GetWorker() string {
	if m != nil {
		return m.Worker
	}
	return ""
}

type QueryGetWorkerResponse struct {
	Worker *Worker `protobuf:"bytes,1,opt,name=worker,proto3" json:"worker,omitempty"`
}

func (m *QueryGetWorkerResponse) Reset()         { *m = QueryGetWorkerResponse{} }
func (m *QueryGetWorkerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetWorkerResponse) ProtoMessage()    {}
func (*QueryGetWorkerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6439ce36a3757d86, []int{7}
}
func (m *QueryGetWorkerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetWorkerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetWorkerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetWorkerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetWorkerResponse.Merge(m, src)
}
func (m *QueryGetWorkerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetWorkerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetWorkerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetWorkerResponse proto.InternalMessageInfo

func (m *QueryGetWorkerResponse) GetWorker() *Worker {
	if m != nil {
		return m.Worker
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryGetVideoRenderingTaskRequest)(nil), "janction.videoRendering.v1.QueryGetVideoRenderingTaskRequest")
	proto.RegisterType((*QueryGetVideoRenderingTaskResponse)(nil), "janction.videoRendering.v1.QueryGetVideoRenderingTaskResponse")
	proto.RegisterType((*QueryGetVideoRenderingLogsRequest)(nil), "janction.videoRendering.v1.QueryGetVideoRenderingLogsRequest")
	proto.RegisterType((*QueryGetVideoRenderingLogsResponse)(nil), "janction.videoRendering.v1.QueryGetVideoRenderingLogsResponse")
	proto.RegisterType((*QueryGetPendingVideoRenderingTaskRequest)(nil), "janction.videoRendering.v1.QueryGetPendingVideoRenderingTaskRequest")
	proto.RegisterType((*QueryGetPendingVideoRenderingTaskResponse)(nil), "janction.videoRendering.v1.QueryGetPendingVideoRenderingTaskResponse")
	proto.RegisterType((*QueryGetWorkerRequest)(nil), "janction.videoRendering.v1.QueryGetWorkerRequest")
	proto.RegisterType((*QueryGetWorkerResponse)(nil), "janction.videoRendering.v1.QueryGetWorkerResponse")
}

func init() {
	proto.RegisterFile("janction/videoRendering/v1/query.proto", fileDescriptor_6439ce36a3757d86)
}

var fileDescriptor_6439ce36a3757d86 = []byte{
	// 507 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0xcb, 0x4a, 0xcc, 0x4b,
	0x2e, 0xc9, 0xcc, 0xcf, 0xd3, 0x2f, 0xcb, 0x4c, 0x49, 0xcd, 0x0f, 0x4a, 0xcd, 0x4b, 0x49, 0x2d,
	0xca, 0xcc, 0x4b, 0xd7, 0x2f, 0x33, 0xd4, 0x2f, 0x2c, 0x4d, 0x2d, 0xaa, 0xd4, 0x2b, 0x28, 0xca,
	0x2f, 0xc9, 0x17, 0x92, 0x82, 0xa9, 0xd3, 0x43, 0x55, 0xa7, 0x57, 0x66, 0x28, 0x85, 0xcf, 0x8c,
	0x92, 0xca, 0x82, 0xd4, 0x62, 0x88, 0x19, 0x52, 0x32, 0xe9, 0xf9, 0xf9, 0xe9, 0x39, 0xa9, 0xfa,
	0x89, 0x05, 0x99, 0xfa, 0x89, 0x79, 0x79, 0xf9, 0x25, 0x89, 0x20, 0x4d, 0x30, 0x59, 0xe9, 0xe4,
	0xfc, 0xe2, 0xdc, 0xfc, 0x62, 0x88, 0xad, 0x68, 0xd6, 0x4b, 0x89, 0xa4, 0xe7, 0xa7, 0xe7, 0x83,
	0x99, 0xfa, 0x20, 0x16, 0x44, 0x54, 0xc9, 0x92, 0x4b, 0x31, 0x10, 0xa4, 0xc8, 0x3d, 0xb5, 0x24,
	0x0c, 0xc5, 0xe6, 0x90, 0xc4, 0xe2, 0xec, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21, 0x11,
	0x2e, 0xd6, 0xcc, 0xbc, 0x94, 0xd4, 0x0a, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x08, 0x47,
	0xa9, 0x8d, 0x91, 0x4b, 0x09, 0x9f, 0xde, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0xa1, 0x04, 0x2e,
	0x11, 0xb0, 0x9f, 0xe2, 0x8b, 0x60, 0xd2, 0xf1, 0x25, 0x89, 0xc5, 0xd9, 0x60, 0xb3, 0xb8, 0x8d,
	0xf4, 0xf4, 0x70, 0x87, 0x8a, 0x1e, 0x16, 0x53, 0x85, 0xca, 0x30, 0xc4, 0x70, 0xfb, 0xc1, 0x27,
	0x3f, 0xbd, 0x98, 0x5c, 0x3f, 0x40, 0xf4, 0xe2, 0xf6, 0x43, 0x4e, 0x7e, 0x7a, 0x31, 0xe9, 0x7e,
	0x00, 0x9b, 0x8a, 0xe6, 0x07, 0x90, 0x98, 0x92, 0x16, 0x97, 0x06, 0xcc, 0x1d, 0x01, 0xa9, 0x79,
	0x29, 0x99, 0x79, 0xe9, 0x38, 0xa3, 0x43, 0xa9, 0x9f, 0x91, 0x4b, 0x93, 0x08, 0xc5, 0x50, 0xb7,
	0x27, 0x71, 0x89, 0x62, 0x0b, 0x7f, 0x90, 0xe3, 0x99, 0xc9, 0x88, 0x00, 0x61, 0xcc, 0x08, 0x28,
	0x56, 0xd2, 0xe7, 0x12, 0x85, 0x39, 0x28, 0x3c, 0xbf, 0x28, 0x3b, 0xb5, 0x08, 0x16, 0xea, 0x62,
	0x5c, 0x6c, 0xe5, 0x60, 0x01, 0x68, 0xb0, 0x43, 0x79, 0x4a, 0x21, 0x5c, 0x62, 0xe8, 0x1a, 0xa0,
	0xce, 0xb5, 0x42, 0xd1, 0xc1, 0x6d, 0xa4, 0x84, 0xcf, 0x7d, 0x50, 0xbd, 0x50, 0x1d, 0x46, 0xdf,
	0x58, 0xb9, 0x58, 0xc1, 0xc6, 0x0a, 0x9d, 0x60, 0xe4, 0x12, 0xc5, 0x9a, 0x2c, 0x85, 0x6c, 0xf1,
	0x99, 0x47, 0x30, 0x2b, 0x48, 0xd9, 0x91, 0xab, 0x1d, 0xe2, 0x3d, 0x25, 0x83, 0x8e, 0xe7, 0x1b,
	0xb4, 0x18, 0x9b, 0x2e, 0x3f, 0x99, 0xcc, 0xa4, 0x2a, 0xa4, 0xac, 0x8f, 0x27, 0xdb, 0x57, 0x83,
	0x53, 0x68, 0x2d, 0x76, 0xaf, 0x80, 0xd2, 0x0c, 0x39, 0x5e, 0x41, 0xca, 0x11, 0xe4, 0x78, 0x05,
	0x39, 0x53, 0x90, 0xe1, 0x95, 0xa5, 0x8c, 0x5c, 0x9c, 0xf0, 0x18, 0x17, 0x32, 0x24, 0xc6, 0x7e,
	0x94, 0xe4, 0x24, 0x65, 0x44, 0x8a, 0x16, 0xa8, 0x33, 0x0d, 0x11, 0xce, 0x54, 0x13, 0x52, 0xc1,
	0xeb, 0x4c, 0x48, 0x32, 0xaa, 0x15, 0x5a, 0xc7, 0xc8, 0x25, 0x8b, 0x2f, 0x6f, 0x15, 0x0b, 0xb9,
	0x10, 0xe3, 0x10, 0x42, 0x19, 0x59, 0xca, 0x95, 0x42, 0x53, 0xa0, 0x3e, 0x64, 0x70, 0xb2, 0x39,
	0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x27, 0x3c, 0x96, 0x63,
	0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39, 0x86, 0x28, 0xa5, 0xf4, 0xcc, 0x92, 0x8c, 0xd2,
	0x24, 0xbd, 0xe4, 0xfc, 0x5c, 0x5c, 0x5e, 0x4f, 0x62, 0x03, 0x57, 0x05, 0xc6, 0x80, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x52, 0xf4, 0x3a, 0x9a, 0xc9, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// GetVideoRenderingTask returns the task based on the taskId
	GetVideoRenderingTask(ctx context.Context, in *QueryGetVideoRenderingTaskRequest, opts ...grpc.CallOption) (*QueryGetVideoRenderingTaskResponse, error)
	GetVideoRenderingLogs(ctx context.Context, in *QueryGetVideoRenderingLogsRequest, opts ...grpc.CallOption) (*QueryGetVideoRenderingLogsResponse, error)
	GetWorker(ctx context.Context, in *QueryGetWorkerRequest, opts ...grpc.CallOption) (*QueryGetWorkerResponse, error)
	GetPendingVideoRenderingTasks(ctx context.Context, in *QueryGetPendingVideoRenderingTaskRequest, opts ...grpc.CallOption) (*QueryGetPendingVideoRenderingTaskResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) GetVideoRenderingTask(ctx context.Context, in *QueryGetVideoRenderingTaskRequest, opts ...grpc.CallOption) (*QueryGetVideoRenderingTaskResponse, error) {
	out := new(QueryGetVideoRenderingTaskResponse)
	err := c.cc.Invoke(ctx, "/janction.videoRendering.v1.Query/GetVideoRenderingTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetVideoRenderingLogs(ctx context.Context, in *QueryGetVideoRenderingLogsRequest, opts ...grpc.CallOption) (*QueryGetVideoRenderingLogsResponse, error) {
	out := new(QueryGetVideoRenderingLogsResponse)
	err := c.cc.Invoke(ctx, "/janction.videoRendering.v1.Query/GetVideoRenderingLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetWorker(ctx context.Context, in *QueryGetWorkerRequest, opts ...grpc.CallOption) (*QueryGetWorkerResponse, error) {
	out := new(QueryGetWorkerResponse)
	err := c.cc.Invoke(ctx, "/janction.videoRendering.v1.Query/GetWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPendingVideoRenderingTasks(ctx context.Context, in *QueryGetPendingVideoRenderingTaskRequest, opts ...grpc.CallOption) (*QueryGetPendingVideoRenderingTaskResponse, error) {
	out := new(QueryGetPendingVideoRenderingTaskResponse)
	err := c.cc.Invoke(ctx, "/janction.videoRendering.v1.Query/GetPendingVideoRenderingTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// GetVideoRenderingTask returns the task based on the taskId
	GetVideoRenderingTask(context.Context, *QueryGetVideoRenderingTaskRequest) (*QueryGetVideoRenderingTaskResponse, error)
	GetVideoRenderingLogs(context.Context, *QueryGetVideoRenderingLogsRequest) (*QueryGetVideoRenderingLogsResponse, error)
	GetWorker(context.Context, *QueryGetWorkerRequest) (*QueryGetWorkerResponse, error)
	GetPendingVideoRenderingTasks(context.Context, *QueryGetPendingVideoRenderingTaskRequest) (*QueryGetPendingVideoRenderingTaskResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) GetVideoRenderingTask(ctx context.Context, req *QueryGetVideoRenderingTaskRequest) (*QueryGetVideoRenderingTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoRenderingTask not implemented")
}
func (*UnimplementedQueryServer) GetVideoRenderingLogs(ctx context.Context, req *QueryGetVideoRenderingLogsRequest) (*QueryGetVideoRenderingLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoRenderingLogs not implemented")
}
func (*UnimplementedQueryServer) GetWorker(ctx context.Context, req *QueryGetWorkerRequest) (*QueryGetWorkerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorker not implemented")
}
func (*UnimplementedQueryServer) GetPendingVideoRenderingTasks(ctx context.Context, req *QueryGetPendingVideoRenderingTaskRequest) (*QueryGetPendingVideoRenderingTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPendingVideoRenderingTasks not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_GetVideoRenderingTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetVideoRenderingTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetVideoRenderingTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/janction.videoRendering.v1.Query/GetVideoRenderingTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetVideoRenderingTask(ctx, req.(*QueryGetVideoRenderingTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetVideoRenderingLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetVideoRenderingLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetVideoRenderingLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/janction.videoRendering.v1.Query/GetVideoRenderingLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetVideoRenderingLogs(ctx, req.(*QueryGetVideoRenderingLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetWorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/janction.videoRendering.v1.Query/GetWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetWorker(ctx, req.(*QueryGetWorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPendingVideoRenderingTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPendingVideoRenderingTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPendingVideoRenderingTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/janction.videoRendering.v1.Query/GetPendingVideoRenderingTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPendingVideoRenderingTasks(ctx, req.(*QueryGetPendingVideoRenderingTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "janction.videoRendering.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVideoRenderingTask",
			Handler:    _Query_GetVideoRenderingTask_Handler,
		},
		{
			MethodName: "GetVideoRenderingLogs",
			Handler:    _Query_GetVideoRenderingLogs_Handler,
		},
		{
			MethodName: "GetWorker",
			Handler:    _Query_GetWorker_Handler,
		},
		{
			MethodName: "GetPendingVideoRenderingTasks",
			Handler:    _Query_GetPendingVideoRenderingTasks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "janction/videoRendering/v1/query.proto",
}

func (m *QueryGetVideoRenderingTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetVideoRenderingTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetVideoRenderingTaskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetVideoRenderingTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetVideoRenderingTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetVideoRenderingTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VideoRenderingTask != nil {
		{
			size, err := m.VideoRenderingTask.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetVideoRenderingLogsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetVideoRenderingLogsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetVideoRenderingLogsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetVideoRenderingLogsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetVideoRenderingLogsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetVideoRenderingLogsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VideoRenderingLogs != nil {
		{
			size, err := m.VideoRenderingLogs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPendingVideoRenderingTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPendingVideoRenderingTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPendingVideoRenderingTaskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetPendingVideoRenderingTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPendingVideoRenderingTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPendingVideoRenderingTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VideoRenderingTasks) > 0 {
		for iNdEx := len(m.VideoRenderingTasks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VideoRenderingTasks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetWorkerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetWorkerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetWorkerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Worker) > 0 {
		i -= len(m.Worker)
		copy(dAtA[i:], m.Worker)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Worker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetWorkerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetWorkerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetWorkerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Worker != nil {
		{
			size, err := m.Worker.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetVideoRenderingTaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetVideoRenderingTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VideoRenderingTask != nil {
		l = m.VideoRenderingTask.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetVideoRenderingLogsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetVideoRenderingLogsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VideoRenderingLogs != nil {
		l = m.VideoRenderingLogs.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPendingVideoRenderingTaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetPendingVideoRenderingTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VideoRenderingTasks) > 0 {
		for _, e := range m.VideoRenderingTasks {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetWorkerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Worker)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetWorkerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Worker != nil {
		l = m.Worker.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetVideoRenderingTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetVideoRenderingTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetVideoRenderingTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetVideoRenderingTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetVideoRenderingTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetVideoRenderingTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoRenderingTask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VideoRenderingTask == nil {
				m.VideoRenderingTask = &VideoRenderingTask{}
			}
			if err := m.VideoRenderingTask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetVideoRenderingLogsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetVideoRenderingLogsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetVideoRenderingLogsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetVideoRenderingLogsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetVideoRenderingLogsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetVideoRenderingLogsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoRenderingLogs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VideoRenderingLogs == nil {
				m.VideoRenderingLogs = &VideoRenderingLogs{}
			}
			if err := m.VideoRenderingLogs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPendingVideoRenderingTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPendingVideoRenderingTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPendingVideoRenderingTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPendingVideoRenderingTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPendingVideoRenderingTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPendingVideoRenderingTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoRenderingTasks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VideoRenderingTasks = append(m.VideoRenderingTasks, &VideoRenderingTask{})
			if err := m.VideoRenderingTasks[len(m.VideoRenderingTasks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetWorkerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetWorkerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetWorkerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Worker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Worker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetWorkerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetWorkerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetWorkerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Worker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Worker == nil {
				m.Worker = &Worker{}
			}
			if err := m.Worker.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
